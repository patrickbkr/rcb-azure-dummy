# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
  # Turn this Powershell console into a developer powershell console.
  # https://intellitect.com/enter-vsdevshell-powershell/
  PWSH_DEV: |
    $installPath = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationpath
    $devShell    = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -find **\Microsoft.VisualStudio.DevShell.dll
    Import-Module $devShell
    Enter-VsDevShell -VsInstallPath $installPath -SkipAutomaticLocation -DevCmdArguments "-arch=amd64"

stages:
- stage: Test
  jobs:
    # Keep the job and matrix entry names as short as possible as the webinterface
    # leaves little space for the name.
    - job: T
      strategy:
        matrix:
          Lin_MVM:
            IMAGE_NAME: 'ubuntu-18.04'
            RAKUDO_OPTIONS: ''
            NQP_OPTIONS: '--backends=moar --ignore-errors'
            MOAR_OPTIONS: '--ignore-errors'

      pool:
        vmImage: $(IMAGE_NAME)
      workspace:
        clean: all
      timeoutInMinutes: 180
      steps:
        - pwsh: |
            # Windows has a maximum PATH variable length of 2048 (depending on
            # how it's accessed). The length of PATH in AzureCI is already
            # really tight. We'll run into the limit when we add Java and the
            # MS BuildTools to the path.
            # To work around this, we remove a bunch of stuff we won't need
            # from PATH here.
            $shortened_path = "$(PATH)" -replace ';[^;]*(SeleniumWebDrivers|SQL Server|Mercurial|Amazon|mysql|\\sbt\\|NSIS|Windows Performance Toolkit|php|Subversion)[^;]*(?=(;|$))', ''
            echo "##vso[task.setvariable variable=PATH]$shortened_path"
          displayName: "Shorten PATH on Windows"
          condition: eq( variables['Agent.OS'], 'Windows_NT' )

        - script: |
            echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)"
            echo "##vso[task.setvariable variable=PATH]$(JAVA_HOME_11_X64)/bin:$(PATH)"
          displayName: "Set java version (non-Windows)"
          condition: and(succeeded(), eq( variables['BACKEND'], 'JVM'), ne( variables['Agent.OS'], 'Windows_NT' ) )
        - pwsh: |
            echo "##vso[task.setvariable variable=JAVA_HOME]$(JAVA_HOME_11_X64)"
            echo "##vso[task.setvariable variable=PATH]$(JAVA_HOME_11_X64)\bin;$(PATH)"
          displayName: "Set java version (Windows)"
          condition: and(succeeded(), eq( variables['BACKEND'], 'JVM'), eq( variables['Agent.OS'], 'Windows_NT' ) )

        - checkout: self
          path: rcb-script-repo
          displayName: Checkout rcb-script-repo

        - script: curl -o sources.tar.xz $(SOURCES_URL)
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Download sources
        - pwsh: curl -o sources.tgz ${env:SOURCES_URL}
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Download sources (Windows)
        
        - script: tar -xJf sources.tar.xz
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Extract sources
        - pwsh: tar -xJf sources.tar.xz
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Extract sources (Windows)

        # Build MoarVM
        - script: |
            perl Configure.pl --prefix=../install $(MOAR_OPTIONS)
            make install
          workingDirectory: '$(Pipeline.Workspace)/MoarVM'
          condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ), ne( variables['BACKEND'], 'JVM') )
          displayName: Build MoarVM
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            perl Configure.pl --prefix=..\install $(MOAR_OPTIONS)
            nmake install
          failOnStderr: false
          workingDirectory: '$(Pipeline.Workspace)/MoarVM'
          condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ), ne( variables['BACKEND'], 'JVM') )
          displayName: Build MoarVM (Windows)

        # Build NQP
        - script: |
            perl Configure.pl --prefix=../install $(NQP_OPTIONS)
            make install
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ))
          displayName: Build NQP
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            perl Configure.pl --prefix=..\install $(NQP_OPTIONS)
            nmake install
          failOnStderr: false
          workingDirectory: '$(Pipeline.Workspace)/nqp'
          condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
          displayName: Build NQP (Windows)

        # Build Rakudo
        - script: |
            perl Configure.pl --prefix=../install $(RAKUDO_OPTIONS)
            make install
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ))
          displayName: Build Rakudo
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            perl Configure.pl --prefix=..\install $(RAKUDO_OPTIONS)
            nmake install
          failOnStderr: false
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
          displayName: Build Rakudo (Windows)

        # TODO: Should use "install moved" instead of "install-moved". But `prove` currently fails with an executable path that contains a space.
        - script: mv install install-moved
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), ne( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Move installation
        - pwsh: mv install install-moved
          workingDirectory: $(Pipeline.Workspace)
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), eq( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Move installation (Windows)

        # Test Rakudo
        - script: prove -e ../install/bin/perl6 -vlr t
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), ne( variables['RELOCATABLE'], 'yes' ), ne( variables['BACKEND'], 'JVM'), ne( variables['Agent.OS'], 'Windows_NT' ), ne( variables['SPECTEST_ONLY'], 'yes' ) )
          displayName: Test Rakudo
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            prove -e ..\install\bin\perl6 -vlr t
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), ne( variables['RELOCATABLE'], 'yes' ), ne( variables['BACKEND'], 'JVM'), eq( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test Rakudo (Windows)
        - script: prove -e ../install-moved/bin/perl6 -vlr t
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), ne( variables['BACKEND'], 'JVM'), ne( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test Rakudo (relocated)
        - pwsh: |
            ${{ variables.PWSH_DEV }}
            prove -e ..\install-moved\bin\perl6 -vlr t
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), ne( variables['BACKEND'], 'JVM'), eq( variables['Agent.OS'], 'Windows_NT' ) )
          displayName: Test Rakudo (relocated, Windows)

        # Run spectest
        - script: make TEST_JOBS=2 m-spectest
          workingDirectory: '$(Pipeline.Workspace)/rakudo'
          condition: and(succeeded(), ne( variables['RELOCATABLE'], 'yes' ), ne( variables['BACKEND'], 'JVM'), ne( variables['Agent.OS'], 'Windows_NT' ), eq( variables['SPECTEST_ONLY'], 'yes' ) )
          displayName: Run spectest

        - publish: $(Pipeline.Workspace)/install-moved
          condition: and(succeeded(), eq( variables['RELOCATABLE'], 'yes' ), ne( variables['BACKEND'], 'JVM') )
          displayName: Publish build artifact